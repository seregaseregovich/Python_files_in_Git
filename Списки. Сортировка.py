# =============================================================
# Сортировка методом выбора. Разработал сам:

l1 = [9, 2, 3, -5, 1, 6, 4, 4, 9, 9]
l2 = []
for i in range(len(l1)):
    # Вариант с добавлением результата поиска (по max) в конец списка
    l1.append(l1.pop(l1.index(max(l1[0:(len(l1) - i)]))))
    # То же самое, с созданием нового списка:
    # l2.append(l1.pop(l1.index(max(l1))))
    # Вариант с использованием вставки по индексу 0 (в начало списка):
    # l1.insert(0, l1.pop(l1.index(max(l1[i:len(l1)]), i, len(l1))))

print(l1, l2, sep='\n')

# =============================================================
# Сортировка методом "пузырька". Разработал сам:

lst1 = [9, 2, 3, -5, 1, 6, 4, 4, 9, 9]
n = 0
while n < len(lst1) - 1:
    if lst1[n + 1] >= lst1[n]:
        n += 1
    else:
        if n == 0:
            lst1[n], lst1[n + 1] = lst1[n + 1], lst1[n]
            n += 1
        else:
            lst1[n], lst1[n + 1] = lst1[n + 1], lst1[n]
            n -= 1
print(lst1)

# =============================================================
# Сортировка методом вставки. Мой медленный вариант.

lst1 = [9, 2, 2, 3, -5, 1, 6, 6, 21, 8, 8, 14, 14, 5, 33, 4]
n = 0
while n < len(lst1) - 1:
    if lst1[n + 1] >= lst1[n]:
        n += 1
    else:
        if n == 0:
            lst1[n], lst1[n + 1] = lst1[n + 1], lst1[n]
            n += 1
        else:
            a = lst1[n]
            b = lst1[n + 1]
            while lst1[n + 1] < lst1[n] and n > 0:
                lst1.insert(n, lst1[n + 1])
                del lst1[n + 2]
                n -= 1

print(lst1)


# =======================================================
# Алгоритм заявлен как сортировка вставкой (из интернета).
# Но на мой взгляд это скорее сортировка пузырьком.

lst1 = [3, 6, 7, 8, 1, 2, 5, 15, 2, 4, 5, 11]

for i in range(1, len(lst1)):
    val = lst1[i]
    j = i - 1
    while j >= 0 and val < lst1[j]:
        lst1[j+1] = lst1[j]
        j -= 1
    lst1[j+1] = val

print(lst1)

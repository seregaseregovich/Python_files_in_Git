''' REGULAR EXPRESSIONS '''
''' СОХРАНЯЮЩИЕ И НЕСОХРАНЯЮЩИЕ СКОБКИ ( ): '''

import re

# Пример несохраняющих скобок - после первой скобки
# добавляются символы ?: (первый уровень сохранения):
txt1 = 'lat = 5, lon=742, a= 45'
match1 = re.findall(r"(?:lat|lon)\s*=\s*(?:\d+)", txt1)
# где (?:lat|lon) и (?:\d+) – сохраняющие скобки.
# Результат: ['lat = 5', 'lon=742'] – сохраняются результаты
# соответствий шаблону в виде списка результатов.


# Пример сохраняющих скобок (второй, внутренний, уровень сохранения):
txt2 = 'lat = 5, lon=742, a= 45'
match2 = re.findall(r"(lat|lon)\s*=\s*(\d+)", txt2)
# где (lat|lon) и (\d+) – сохраняющие скобки.
# Результат: [('lat', '5'), ('lon', '742')] – список кортежей
# с ключами и значениями.


# Чтобы увидеть первый и второй уровни сохранения,
# необходимо весь шаблон поместить в скобки:
txt3 = 'lat = 5, lon=742, a= 45'
match3 = re.findall(r"((lat|lon)\s*=\s*(\d+))", txt3),
# Результат: 		[('lat = 5', 'lat', '5'), ('lon=742', 'lon', '742')]
# Уровни сохранения:      1        2     2         1        2      2
# Преимущество – с полученным результатом удобнее работать.


# Пример поиска соответствия файла типа jpg внутри тега,
# заключенного в угловые скобки:
txt4 = "<p>Картинка4 <img src='bg.jpg'> в тексте</p>>"
match41 = re.findall(r"(<img\s+[^>]*src=[\'\"](.+?.jpg)[\'\"]>)", txt4)
# Результат: [("<img src='bg.jpg'>", 'bg.jpg')] – список с кортежем с результатами.
# Уровни сохранения:   1                 2
match42 = re.findall(r"<img\s+[^>]*src=[\'\"](.+?.jpg)[\'\"]>", txt4)
# Результат:       ['bg.jpg'] – список с результатом.
# Уровень сохранения - 2.


# Примеры, когда в поиске совпадений необходимо выделить одинаковые
# кавычки (либо другие строго одинаковые элементы шаблона
# для выделения необходимого нам совпадения):
txt51 = "<p>Картинка51 <img src='bg.jpg'> в тексте</p>>"
match51 = re.findall(r"<img\s+[^>]*src=[\'\"](.+?.jpg)[\'\"]>", txt51)
# Результат: ['bg.jpg']
txt52 = "<p>Картинка52 <img src='bg.jpg\"> в тексте</p>>"
match52 = re.findall(r"<img\s+[^>]*src=[\'\"](.+?.jpg)[\'\"]>", txt52)
# Результат: ['bg.jpg'] – неверное совпадение! – кавычки должны быть одинаковы!
txt53 = "<p>Картинка53 <img src='bg.jpg\"> в тексте</p>>"
match53 = re.findall(r"<img\s+[^>]*src=([\'\"])(.+?.jpg)\1>", txt53)
# Результат: [ ] – нет соответствия (всё верно, т.к. кавычки разные).
txt54 = "<p>Картинка54 <img src='bg.jpg'> в тексте</p>>"
match54 = re.findall(r"<img\s+[^>]*src=([\'\"])(.+?.jpg)\1>", txt54)
# Результат: [(" ' ", 'bg.jpg')] – в кортеже сохранились как кавычки
# (что нам особо не мешает), так и правильный результат,
# который в тексте заключен в одинаковые кавычки
# (что соответствует нашим требованиям).
# 	\1 – означает, что на это место в шаблон необходимо вставить
# результат совпадения, соответствующий шаблону, заключенному
# в первых (1) скобках по счету с левой стороны – [\'\"].
# Этим результатом для примера выше являются первые
# одинарные кавычки 'bg.jpg.


# Альтернатива цифрам \1 выше – присвоение нужному нам
# результату совпадения своего имени:
#	(?P<name>..pattern..), где name – имя, присвоенное данному
# результату совпадения шаблону pattern.
#	(?P=name) – способ применения результата совпадения
# внутри шаблона.
# Пример использования:
txt6 = "<p>Картинка6 <img src='bg.jpg\'> в тексте</p>>"
match6 = re.findall(r"<img\s+[^>]*src=(?P<Name>[\"'])(.+?.jpg)(?P=Name)>", txt6)
# Результат: [(" ' ", 'bg.jpg')] – Всё сработало аналогично
# примеру выше с применением \1.

print('1 =', match1)
print('2 =', match2)
print('3 =', match3)
print('41 =', match41)
print('42 =', match42)
print('51 =', match51)
print('52 =', match52)
print('53 =', match53)
print('54 =', match54)
print('6 =', match6)
